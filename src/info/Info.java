package info;

public class Info {
    /**
     * Переменная предоставляет нам именованное хранилище, которым могут манипулировать наши программы. Java предоставляет три типа переменных.
     *
     * Переменные класса — переменные класса, также известные как статические переменные, объявляются с ключевым словом static в классе, но вне метода, конструктора или блока. Будет только одна копия каждой переменной класса для каждого класса, независимо от того, сколько объектов создается из него.
     *
     * Переменные экземпляра — переменные экземпляра объявляются в классе, но вне метода. Когда для объекта в куче выделяется место, создается слот для каждого значения переменной экземпляра. Переменные экземпляра содержат значения, на которые должны ссылаться более одного метода, конструктора или блока, или важные части состояния объекта, которые должны присутствовать во всем классе.
     *
     * Локальные переменные — локальные переменные объявляются в методах, конструкторах или блоках. Локальные переменные создаются при входе в метод, конструктор или блок, и переменная будет уничтожена после выхода из метода, конструктора или блока.
     *
     *
     * Өзгөрмөлөр бизге программаларыбызы башкара ала турган атайын кутуча болуп берет.
     * Java өзгөрмөлөрдүн үч түрүн камсыз кылат.
     *
     * 1.Class variables
     * Класс өзгөрмөлөрү -
     * Статикалык өзгөрмөлөр бул класс өзгөрмөлөрү болот,
     * бирок методдун, конструктордун же блоктун сыртында.
     *
     * 2.Instance variables
     * Instance variables -
     * Инстанция өзгөрмөлөрү класста жарыяланат, бирок методдон тышкары.
     * бүткүл класста болушу керек объекттин абалынын маанилүү бөлүктөрүн камтыйт.
     *
     * 3.Local variables
     * Локалдык өзгөрмөлөр –
     * Локалдык өзгөрмөлөр методдордо, конструкторлордо же блоктордо жарыяланат.
     * Жергиликтүү өзгөрмөлөр метод,
     * конструктор же блок киргизилгенде түзүлөт жана өзгөрмө методдон,
     * конструктордон же блоктон чыккандан кийин жок кылынат.
     *
     */
    VariableExample variableExample = new VariableExample();


    /**
     *                     Object class
     * Объект классы java.lang пакетинде бар.
     * Javaдагы ар бир класс түз же кыйыр түрдө Object классынан алынган.
     * Эгерде класс башка классты урастабаса, анда ал Объекттин түз бала(child) классы болуп саналат,
     * ал эми башка классты мурастаса, анда ал кыйыр түрдө алынат.
     * Ошондуктан Object классынын методдору бардык Java класстары үчүн жеткиликтүү.
     * Демек, Object классы каалаган Java программасында мурас иерархиясынын тамыры катары иштейт.
     *
     * Объект классынын методдорун колдонуу
     * Object классы төмөнкүдөй бир нече ыкмаларды камсыз кылат:
     *
     * tostring()
     * hashCode()
     * equals(Object obj)
     * finalize()
     * getClass()
     * clone()
     * wait(), notify() notifyAll()
     *
     * Ушул ссылка аркылуу кирип окунуздар: https://www.geeksforgeeks.org/object-class-in-java/
     */


    /**
     *                             Inheritance
     * ?Мурас - OOP (объектке багытталган программалоо) маанилүү тиреги.
     * Бул javaдагы механизм, анын жардамы менен бир класска башка класстын өзгөчөлүктөрүн
     * (оляларын жана методдорун) мурастоого уруксат берилет.
     * Java-да мурастоо учурдагы класстардын негизинде жаңы класстарды түзүү дегенди билдирет.
     * Башка класстан тукум кууп өткөн класс ошол класстын методдорун жана талааларын кайра колдоно алат.
     * Мындан тышкары, сиз учурдагы классыңызга жаңы талааларды жана ыкмаларды кошо аласыз.
     *
     * Javaдагы мурас: бизге эмне үчүн керек?
     * Коддун кайра колдонулушу:
     * Суперкласста жазылган код бардык подкласстар үчүн жалпы болуп саналат.
     * Балдар класстары ата-энелер классынын кодун түздөн-түз колдоно алышат.
     * Методду жокко чыгаруу:
     * Методду жокко чыгаруу мурас аркылуу гана ишке ашат.
     * Бул Java Run Time Полиморфизмине жетүүнүн жолдорунун бири.
     * Абстракция:
     * абстракция түшүнүгү, анда биз бардык майда-чүйдөсүнө чейин берүү керек эмес,
     * мурас аркылуу жетишилет. Абстракция колдонуучуга функцияны гана көрсөтөт.
     *
     * Мураста колдонулган маанилүү терминдер:
     * Класс: Класс - бул жалпы мүнөздөмөлөрдү/ жүрүм-турумду жана жалпы касиеттерди/ атрибуттарды бөлгөн объекттердин жыйындысы.
     * Класс реалдуу дүйнө объекти эмес. Бул жөн гана шаблон же план же объекттер түзүлгөн прототип.
     * Супер класс/Ата-эне класс: өзгөчөлүктөрү тукум кууп өткөн класс суперкласс
     * (же базалык класс же ата-эне класс) катары белгилүү.
     * Суб класс/Бала класс: Башка классты мурастаган класс субкласс
     * (же туунду класс, кеңейтилген класс же бала класс) катары белгилүү.
     * Субкласс суперкласс талааларына жана ыкмаларына кошумча өзүнүн талааларын жана ыкмаларын кошо алат.
     * Кайра колдонууга жарамдуу:
     * Мурас "кайра колдонуу" түшүнүгүн колдойт, башкача айтканда,
     * биз жаңы класс түзгүбүз келгенде жана биз каалаган коддун бир бөлүгүн камтыган класс бар болсо,
     * биз жаңы классыбызды учурдагы класстан ала алабыз. Муну менен биз учурдагы класстын талааларын жана ыкмаларын кайра колдонуп жатабыз.
     * Java'да мурасты кантип колдонсо болот?
     * extension ачкыч сөзү javaда мурастоо үчүн колдонулат.
     * extends ачкыч сөзүн колдонуу учурдагы класстан алынганыңызды көрсөтөт.
     * Башка сөз менен айтканда, "узартуу" жогорулаган функцияны билдирет.
     *
     * link --- https://www.geeksforgeeks.org/inheritance-in-java/
     */
}
